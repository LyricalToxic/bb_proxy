import click
from click.types import StringParamType, IntParamType
from sqlalchemy import insert, select, func, and_
from sqlalchemy.dialects import sqlite

from cmdline.commands.validators import Password
from database.models.bb import Comrade, ProxyComrade, ProxyCredential, Statistic
from utils.constans import GiB, BYTE
from utils.project.enums import RotateStrategies
from utils.project.func.password_hashing import hash_password


@click.group()
def sql():
    """ SQL query generator group"""


@click.command("insert_comrade")
@click.option("-n", "--name", type=StringParamType(), help="Comrade name")
@click.option("-u", "--username", type=StringParamType(), help="Comrade username")
@click.option("-p", "--password", type=Password(), help="Comrade password")
@click.option("-d", "--description", type=StringParamType(), help="Comrade description", default="Generated by click")
def insert_comrade(name: str, username: str, password: str, description: str):
    stmt = insert(Comrade).values({
        Comrade.name: name,
        Comrade.username: username,
        Comrade.password: hash_password(password),
        Comrade.description: description
    })
    click.echo(stmt.compile(dialect=sqlite.dialect(), compile_kwargs={"literal_binds": True}))


@click.command("insert_proxy_comrade")
@click.option("-p", "--proxy_id", type=IntParamType(), help="Proxy internal id")
@click.option("-c", "--comrade_id", type=IntParamType(), help="Comrade internal id")
@click.option("-b", "--bandwidth", type=IntParamType(),
              help="Bytes traffic bandwidth limitation. Use -1 value for unlimited usage", default=1024)
@click.option("-t", "--threads", type=IntParamType(),
              help="Concurrency thread limitation. Use -1 value for unlimited usage", default=1)
@click.option("-r", "--rotate", type=IntParamType(),
              help=f"Rotate strategies. Available values {RotateStrategies()}", default=0)
def insert_proxy_comrade(proxy_id: int, comrade_id: int, bandwidth: int, threads: int, rotate: int):
    stmt = insert(ProxyComrade).values({
        ProxyComrade.proxy_credential_id: proxy_id,
        ProxyComrade.comrade_id: comrade_id,
        ProxyComrade.bandwidth_limit_b: bandwidth,
        ProxyComrade.concurrency_threads_limit: threads,
        ProxyComrade.rotate_strategy: rotate,
    })
    click.echo(stmt.compile(dialect=sqlite.dialect(), compile_kwargs={"literal_binds": True}))


@click.command("insert_proxy")
@click.option("-t", "--proxy_type", type=StringParamType(), help="Proxy type. Example: `geosurf`")
@click.option("-p", "--protocol", type=StringParamType(), help="Proxy protocol: `https`, `http`")
@click.option("-o", "--port", type=IntParamType(), help="Proxy port")
@click.option("-h", "--host", type=StringParamType(), help="Proxy host")
@click.option("-u", "--username", type=StringParamType(), help="Proxy username")
@click.option("-w", "--password", type=StringParamType(), help="Proxy password")
@click.option("-d", "--description", type=StringParamType(), help=f"Proxy description", default="")
def insert_proxy(proxy_type: str, protocol: str, port: int, host: str, username: str, password: str, description: str):
    stmt = insert(ProxyCredential).values({
        ProxyCredential.type: proxy_type,
        ProxyCredential.protocol: protocol,
        ProxyCredential.host: host,
        ProxyCredential.port: port,
        ProxyCredential.username: username,
        ProxyCredential.password: hash_password(password),
        ProxyCredential.description: description,
    })
    click.echo(stmt.compile(dialect=sqlite.dialect(), compile_kwargs={"literal_binds": True}))


@click.command("select_statistic")
@click.option("-p", "--proxy_comrade_id", type=IntParamType(), help="Internal proxy comrade id", required=True)
@click.option("-s", "--start_date", type=StringParamType(),
              help="Start date range value that will be calculated statistics. Example: `2022-01-01`",
              default="2022-01-01")
@click.option("-f", "--finish_date", type=StringParamType(),
              help="Finish date range value that will be calculated statistics. Example: `2022-02-01`",
              default="2022-02-01")
def select_statistic(proxy_comrade_id: int, start_date: str, finish_date: str):
    stmt = select([
        (func.sum(Statistic.upload_traffic_bytes) * 1.0 / GiB / BYTE).label("upload_traffic_gb"),
        (func.sum(Statistic.download_traffic_bytes) * 1.0 / GiB / BYTE).label("download_traffic_gb"),
        (func.sum(Statistic.total_traffic_bytes) * 1.0 / GiB / BYTE).label("total_traffic_gb"),
    ]).where(
        Statistic.proxy_comrade_limit_id == proxy_comrade_id,
        and_(
            Statistic.created_at > start_date,
            Statistic.created_at < finish_date,
        )
    )
    click.echo(stmt.compile(dialect=sqlite.dialect(), compile_kwargs={"literal_binds": True}))


def get_sql_group():
    sql.add_command(insert_comrade)
    sql.add_command(insert_proxy_comrade)
    sql.add_command(insert_proxy)
    sql.add_command(select_statistic)
    return sql
